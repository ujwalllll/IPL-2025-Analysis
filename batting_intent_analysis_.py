# -*- coding: utf-8 -*-
"""Batting Intent Analysis .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16iyz8szezinsRYCSWCXQt3dX9qdqOC7-
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd

# Load the data
df = pd.read_csv('ipl_match_1473461_deliveries.csv')

# Quick look at the structure
df.head()

df.columns

df.columns.tolist()

import pandas as pd

df = pd.read_csv('ipl_match_1473461_deliveries.csv')

batter_summary = df.groupby('batter').agg(
    Runs=('runs_batter', 'sum'),
    Balls=('runs_batter', 'count'),
    Fours=('runs_batter', lambda x: (x == 4).sum()),
    Sixes=('runs_batter', lambda x: (x == 6).sum()),
    DotBalls=('runs_batter', lambda x: (x == 0).sum()),
    Dismissals=('player_out', lambda x: x.notna().sum())
).reset_index()

batter_summary['StrikeRate'] = (batter_summary['Runs'] / batter_summary['Balls']) * 100
batter_summary['Boundary%'] = ((batter_summary['Fours'] + batter_summary['Sixes']) / batter_summary['Balls']) * 100
batter_summary['DotBall%'] = (batter_summary['DotBalls'] / batter_summary['Balls']) * 100

# Filter batters who faced at least 5 balls
batter_summary = batter_summary[batter_summary['Balls'] >= 5]

batter_summary.sort_values(by='StrikeRate', ascending=False).head(10)

import seaborn as sns
import matplotlib.pyplot as plt

top_aggressive = batter_summary.sort_values(by='StrikeRate', ascending=False).head(10)

plt.figure(figsize=(12, 6))
sns.barplot(data=top_aggressive, y='batter', x='StrikeRate', palette='magma')
plt.title('Top 10 Batters by Strike Rate (Intent)')
plt.xlabel('Strike Rate')
plt.ylabel('Batter')
plt.show()

def label_phase(over):
    if 1 <= over <= 6:
        return 'Powerplay'
    elif 16 <= over <= 20:
        return 'Death'
    else:
        return 'Middle'

df['Phase'] = df['over'].apply(label_phase)

phase_summary = df[df['Phase'].isin(['Powerplay', 'Death'])].groupby(['batter', 'Phase']).agg(
    Runs=('runs_batter', 'sum'),
    Balls=('runs_batter', 'count'),
    Fours=('runs_batter', lambda x: (x == 4).sum()),
    Sixes=('runs_batter', lambda x: (x == 6).sum()),
    DotBalls=('runs_batter', lambda x: (x == 0).sum())
).reset_index()

phase_summary['StrikeRate'] = (phase_summary['Runs'] / phase_summary['Balls']) * 100
phase_summary['Boundary%'] = ((phase_summary['Fours'] + phase_summary['Sixes']) / phase_summary['Balls']) * 100
phase_summary['DotBall%'] = (phase_summary['DotBalls'] / phase_summary['Balls']) * 100

# Filter for batters who faced at least 5 balls in a phase
phase_summary = phase_summary[phase_summary['Balls'] >= 5]

plt.figure(figsize=(12, 6))
sns.barplot(data=phase_summary, x='StrikeRate', y='batter', hue='Phase', palette='Set2')
plt.title('Batting Intent in Powerplay vs Death Overs')
plt.xlabel('Strike Rate')
plt.ylabel('Batter')
plt.legend(title='Phase')
plt.show()

def label_phase(over):
    if 1 <= over <= 6:
        return 'Powerplay'
    elif 7 <= over <= 15:
        return 'Middle'
    else:
        return 'Death'

df['Phase'] = df['over'].apply(label_phase)

team_phase_summary = df.groupby(['team', 'Phase']).agg(
    Runs=('runs_batter', 'sum'),
    Balls=('runs_batter', 'count'),
    Fours=('runs_batter', lambda x: (x == 4).sum()),
    Sixes=('runs_batter', lambda x: (x == 6).sum()),
    DotBalls=('runs_batter', lambda x: (x == 0).sum())
).reset_index()

team_phase_summary['StrikeRate'] = (team_phase_summary['Runs'] / team_phase_summary['Balls']) * 100
team_phase_summary['Boundary%'] = ((team_phase_summary['Fours'] + team_phase_summary['Sixes']) / team_phase_summary['Balls']) * 100
team_phase_summary['DotBall%'] = (team_phase_summary['DotBalls'] / team_phase_summary['Balls']) * 100

plt.figure(figsize=(12, 6))
sns.barplot(data=team_phase_summary, x='Phase', y='StrikeRate', hue='team', palette='Paired')
plt.title('Team-Wise Batting Intent (Strike Rate) Across Match Phases')
plt.ylabel('Strike Rate')
plt.xlabel('Match Phase')
plt.legend(title='Team')
plt.grid(axis='y')
plt.show()

batter_intent = df.groupby('batter').agg(
    Runs=('runs_batter', 'sum'),
    Balls=('runs_batter', 'count'),
    Fours=('runs_batter', lambda x: (x == 4).sum()),
    Sixes=('runs_batter', lambda x: (x == 6).sum()),
    DotBalls=('runs_batter', lambda x: (x == 0).sum())
).reset_index()

batter_intent['Boundary%'] = ((batter_intent['Fours'] + batter_intent['Sixes']) / batter_intent['Balls']) * 100
batter_intent['DotBall%'] = (batter_intent['DotBalls'] / batter_intent['Balls']) * 100
batter_intent = batter_intent[batter_intent['Balls'] >= 5]  # Only meaningful data

plt.figure(figsize=(10, 6))
sns.scatterplot(data=batter_intent, x='DotBall%',
                y='Boundary%', hue='batter', palette='tab10', s=100)

plt.title('Boundary% vs Dot Ball% per Batter')
plt.xlabel('Dot Ball %')
plt.ylabel('Boundary %')
plt.axvline(50, linestyle='--', color='gray', label='50% Dot Ball')
plt.axhline(25, linestyle='--', color='gray', label='25% Boundary')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.grid(True)
plt.show()

batter_radar = df.groupby('batter').agg(
    Runs=('runs_batter', 'sum'),
    Balls=('runs_batter', 'count'),
    Fours=('runs_batter', lambda x: (x == 4).sum()),
    Sixes=('runs_batter', lambda x: (x == 6).sum()),
    DotBalls=('runs_batter', lambda x: (x == 0).sum()),
    Dismissals=('player_out', lambda x: x.notna().sum())
).reset_index()

batter_radar['StrikeRate'] = (batter_radar['Runs'] / batter_radar['Balls']) * 100
batter_radar['Boundary%'] = ((batter_radar['Fours'] + batter_radar['Sixes']) / batter_radar['Balls']) * 100
batter_radar['DotBall%'] = (batter_radar['DotBalls'] / batter_radar['Balls']) * 100

# Filter batters who faced at least 5 balls
batter_radar = batter_radar[batter_radar['Balls'] >= 5]

import numpy as np
from math import pi

def plot_radar(batter_name):
    player = batter_radar[batter_radar['batter'] == batter_name]

    if player.empty:
        print("Batter not found or didn't face enough balls.")
        return

    categories = ['StrikeRate', 'Boundary%', 'DotBall%', 'Fours', 'Sixes', 'Dismissals']
    values = player[categories].values.flatten().tolist()

    # Close the radar loop
    values += values[:1]
    angles = [n / float(len(categories)) * 2 * pi for n in range(len(categories))]
    angles += angles[:1]

    # Plot
    fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))
    ax.plot(angles, values, linewidth=2, linestyle='solid', label=batter_name)
    ax.fill(angles, values, alpha=0.25)

    ax.set_xticks(angles[:-1])
    ax.set_xticklabels(categories)
    ax.set_title(f'Radar Chart: {batter_name}', size=15)
    plt.legend(loc='upper right', bbox_to_anchor=(1.2, 1))
    plt.show()

plot_radar('V Kohli')  # Replace with your batter name

top4_batters = batter_radar.sort_values(by='StrikeRate', ascending=False).head(4)

def plot_radar_multiple(batters_df):
    from math import pi

    categories = ['StrikeRate', 'Boundary%', 'DotBall%', 'Fours', 'Sixes', 'Dismissals']
    N = len(categories)

    angles = [n / float(N) * 2 * pi for n in range(N)]
    angles += angles[:1]  # close loop

    plt.figure(figsize=(8, 8))
    ax = plt.subplot(111, polar=True)

    # Plot each batter
    for idx, row in batters_df.iterrows():
        values = row[categories].values.flatten().tolist()
        values += values[:1]
        ax.plot(angles, values, linewidth=2, label=row['batter'])
        ax.fill(angles, values, alpha=0.1)

    ax.set_xticks(angles[:-1])
    ax.set_xticklabels(categories)
    ax.set_title('Radar Chart: Top 4 Batters by Strike Rate')
    plt.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1))
    plt.tight_layout()
    plt.show()

plot_radar_multiple(top4_batters)

top4_batters = batter_radar.sort_values(by='StrikeRate', ascending=False).head(4)

def plot_radar_single(batter_data):
    from math import pi

    categories = ['StrikeRate', 'Boundary%', 'DotBall%', 'Fours', 'Sixes', 'Dismissals']
    values = batter_data[categories].values.flatten().tolist()
    values += values[:1]
    angles = [n / float(len(categories)) * 2 * pi for n in range(len(categories))]
    angles += angles[:1]

    plt.figure(figsize=(6, 6))
    ax = plt.subplot(111, polar=True)
    ax.plot(angles, values, linewidth=2, label=batter_data['batter'])
    ax.fill(angles, values, alpha=0.25)

    ax.set_xticks(angles[:-1])
    ax.set_xticklabels(categories)
    ax.set_title(f"Radar Chart: {batter_data['batter']}", size=14)
    plt.legend(loc='upper right')
    plt.tight_layout()
    plt.show()

for i in range(len(top4_batters)):
    plot_radar_single(top4_batters.iloc[i])

# Aggregate runs per over
over_summary = df.groupby('over').agg(
    Runs=('runs_batter', 'sum'),
    Wickets=('wicket_kind', 'count')
).reset_index()

fig, ax1 = plt.subplots(figsize=(12, 6))

# Plot runs per over
ax1.set_xlabel('Over')
ax1.set_ylabel('Runs', color='tab:blue')
ax1.plot(over_summary['over'], over_summary['Runs'], color='tab:blue', label='Runs', linestyle='-', marker='o')
ax1.tick_params(axis='y', labelcolor='tab:blue')

# Create second y-axis for wickets
ax2 = ax1.twinx()
ax2.set_ylabel('Wickets', color='tab:red')
ax2.plot(over_summary['over'], over_summary['Wickets'], color='tab:red', label='Wickets', linestyle='--', marker='x')
ax2.tick_params(axis='y', labelcolor='tab:red')

plt.title('Over-wise Runs vs Wickets Analysis')
fig.tight_layout()
plt.show()

